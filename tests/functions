# -*-Shell-script-*-
#
# This file contains functions to be used by most or all
# shell scripts in the /tests directory.
#

export COMPOSE_FILE="${BASE}/docker-compose.yml"
export ENV_FILE="${BASE}/.env"

export PASS_STR="\e[32mOK\e[39m"
export FAIL_STR="\e[31mFAIL\e[39m"

getenvvar() {
  if [ -z "${1}" ]; then
    echo "getenv error"
    exit 99
  fi

  LINE=$(cat "${ENV_FILE}" | grep "${1}=")
  if [ $? -eq 0 ]; then
    echo ${LINE#${1}=}
  fi
}

envdestroy() {
  docker-compose -f "${COMPOSE_FILE}" down -v
}

envprepare() {
  envdestroy

  docker-compose -f "${COMPOSE_FILE}" build --pull
  docker-compose -f "${COMPOSE_FILE}" up -d
}

mysqlimport() {
  docker-compose -f "${COMPOSE_FILE}" run --rm ops-utils \
    mysql import-from-bucket --provider minio --bucket-endpoint "http://minio:9000" --bucket seeds --file dump.sql.gz
}

mysqlimport_exported_db() {
  DB_NAME_EXP=$(getenvvar DB_NAME_EXP)

  docker-compose -f "${COMPOSE_FILE}" run --rm ops-utils \
    mysql export-to-bucket --provider minio --bucket-endpoint "http://minio:9000" --bucket seeds --file exported/dump-exported.sql.gz
  query "CREATE DATABASE ${DB_NAME_EXP};"
  docker-compose -f "${COMPOSE_FILE}" run --rm -e DB_NAME=${DB_NAME_EXP} ops-utils \
    mysql import-from-bucket --provider minio --bucket-endpoint "http://minio:9000" --bucket seeds --file exported/dump-exported.sql.gz
}

mysqldroptables() {
  docker-compose -f "${COMPOSE_FILE}" run --rm ops-utils \
    mysql drop-db-tables
}

query() {
  if [ -z "${1}" ]; then
    echo "Query error"
    exit 99
  fi

  docker-compose -f "${COMPOSE_FILE}" run --entrypoint ash --rm ops-utils -lic \
    'mysql --skip-column-names --silent --raw -h "${DB_HOST}" -u ${DB_USER} --password=${DB_PASSWORD} --database="${DB_NAME}" -e "'"${1}"'"' | tr -d "\r"
}

query_exported_db() {
  if [ -z "${1}" ]; then
    echo "Query error"
    exit 99
  fi

  docker-compose -f "${COMPOSE_FILE}" run --entrypoint ash --rm ops-utils -lic \
    'mysql --skip-column-names --silent --raw -h "${DB_HOST}" -u ${DB_USER} --password=${DB_PASSWORD} --database="${DB_NAME_EXP}" -e "'"${1}"'"' | tr -d "\r"
}

copyfiles() {
  if [ -z "${1}" ] || [ -z "${2}" ]; then
    echo "Copyfiles error"
    exit 99
  fi

  FILE_SRC="${1}"
  FILE_DST="${2}"

  docker-compose -f "${COMPOSE_FILE}" run --rm ops-utils \
    bucket copy-bucket --provider minio \
    --bucket-src-endpoint "http://minio:9000" --bucket-src seeds --file-src "${FILE_SRC}" \
    --bucket-dst-endpoint "http://minio-dst:9000" --bucket-dst dstbucket --file-dst "${FILE_DST}"
}

copybucket() {
  if [ -z "${1}" ]; then
    echo "Copybucket error"
    exit 99
  fi

  FILE_DST="${1}"

  docker-compose -f "${COMPOSE_FILE}" run --rm ops-utils \
    bucket copy-bucket --provider minio \
    --bucket-src-endpoint "http://minio:9000" --bucket-src seeds \
    --bucket-dst-endpoint "http://minio-dst:9000" --bucket-dst dstbucket --file-dst "${FILE_DST}"
}

bucketlsf() {
  if [ -z "${1}" ] || [ -z "${2}" ]; then
    echo "Bucketls error"
    exit 99
  fi

  ENDPOINT="${1}"
  FILE="${2}"

  docker-compose -f "${COMPOSE_FILE}" run --rm --entrypoint ash ops-utils -lic \
    'rclone --s3-provider=Minio --s3-env-auth --s3-endpoint="'"${ENDPOINT}"'" lsf :s3:"'"${FILE}"'" 2>/dev/null' | tr -d "\r"
}

fail() {
  INFO=""
  if [ -n "${1}" ]; then
    INFO="${1}"
  fi

  if [ -n "${2}" ]; then
    INFO="${INFO} - ACTUAL: ${2}"
  fi

  if [ -n "${3}" ]; then
    INFO="${INFO} - EXPECTED: ${3}"
  fi

  echo "${FAIL_STR} - ${INFO}"

  exit 1
}

success() {
  INFO=""
  if [ -n "${1}" ]; then
    INFO="${1}"
  fi

  if [ -n "${2}" ]; then
    INFO="${INFO} - ACTUAL: ${2}"
  fi

  if [ -n "${3}" ]; then
    INFO="${INFO} - EXPECTED: ${3}"
  fi

  echo "${PASS_STR} - ${INFO}"
}
